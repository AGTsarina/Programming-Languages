#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

// Введениев в ООП. Создание объектов (инкапсуляция)
struct Item{ // определение пользовательского типа данных,
// который позволяет объединить в себе описание свойств и действий
// характерных для объектов этого типа
// перечисление свойств (тип данных + имя свойства)
    int key;
    char *name; // внешний массив
    double param;
    double data[10]; // внутренний массив
// перечисление действий (заголовки методов - внутренние функции класса/структуры)
    // void Print();
    // void Draw();
};

enum Color{RED, GREEN, BLUE, WHITE, BLACK}; // пользовательский тип - перечисление
struct Point{
    double x, y;
    Color color;
    // конструктор - специального вида метод, не имеющий возвращаемого значения
    // по имени совпадающий с названием класса, в качестве параметор которого указаны
    // начальные значения полей (если не предусмотрены значения по умолчанию)
    Point(){ // конструктор по умолчанию
        x = y = 0; color = RED;
    }
    Point(double x, double y, Color color){
        // this - скрытый параметр (указатель), равный адресу в памяти текущего объекта (типа Point)
        // Пусть p - указатель, тогда *p - получение значения по адресу p
        // Если  *p - сложный объект (класа или структуры), то (*p).field - обращение у свойству объекта
        // Орератор ->  является точным аналогом конструкции (*p).field
        this->x = x;
        this->y = y;
        this->color = color;
    }
};
struct Circle{
    double x, y, R;
    Color color;
};
struct Person{
    char *name, *surname;
    int day, month, year;
    char * address; 
};

int main(){
    // создание объекта пользовательского типа
    Point point0; // создается объект point0 типа Point (выделяется память инициализация по умолчанию)
    Point point(10, 20, RED); // конструируется объект point типа Point (выделяется память, полям присваиваются
    // начальные значения) => должен быть определен конструктор для инициализации объекта
    cout << sizeof(Color) << " " << sizeof(Point) << endl;
    // point.x = 10; point.y = 20; point.color = RED;
    cout << point.x << " " << point.y << " " << point.color << endl;
}